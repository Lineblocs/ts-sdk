syntax = "proto3";
package grpc;
option go_package = "./";

// The greeting service definition.
service Lineblocs {

// general purpose
  rpc createBridge (BridgeRequest) returns (BridgeReply) {}
  rpc createCall (CallRequest) returns (CallReply) {}
  rpc addChannel (ChannelRequest) returns (ChannelReply) {}
  rpc playRecording (RecordingPlayRequest) returns (RecordingPlayReply) {}
  rpc getChannel (ChannelFetchRequest) returns (ChannelFetchReply) {}
  rpc createConference (ConferenceRequest) returns (ConferenceReply) {}


// channel functions
  rpc channel_getBridge (ChannelGetBridgeRequest) returns (ChannelGetBridgeReply) {}
  rpc channel_removeFromBridge (ChannelRemoveBridgeRequest) returns (ChannelRemoveBridgeReply) {}
  rpc channel_playTTS (ChannelTTSRequest) returns (ChannelTTSReply) {}
  rpc channel_startAcceptingInput (ChannelInputRequest) returns (ChannelInputReply) {}
  rpc channel_removeDTMFListeners (ChannelRemoveDTMFRequest) returns (ChannelRemoveDTMFReply) {}
  rpc channel_automateCallHangup (GenericChannelReq) returns (GenericChannelResp) {}
  rpc channel_gotoFlowWidget (ChannelFlowWidgetRequest) returns (ChannelFlowWidgetReply) {}
  rpc channel_startFlow (ChannelStartFlowWidgetRequest) returns (ChannelStartFlowWidgetReply) {}
  rpc channel_startRinging (GenericChannelReq) returns (GenericChannelResp) {}
  rpc channel_stopRinging (GenericChannelReq) returns (GenericChannelResp) {}
  rpc channel_hangup(GenericChannelReq) returns (GenericChannelResp) {}

// bridge functions
  rpc bridge_addChannel (BridgeChannelRequest) returns (BridgeChannelReply) {}
  rpc bridge_addChannels (BridgeChannelsRequest) returns (BridgeChannelsReply) {}
  rpc bridge_playTTS (BridgeTTSRequest) returns (BridgeTTSReply) {}
  rpc bridge_automateLegAHangup (BridgeAutomateLegRequest) returns (BridgeAutomateLegReply) {}
  rpc bridge_automateLegBHangup (BridgeAutomateLegRequest) returns (BridgeAutomateLegReply) {}
  rpc bridge_destroy (GenericBridgeReq) returns (GenericBridgeResp) {}
  rpc bridge_attachEventListener (BridgeEventRequest) returns (BridgeEventReply) {}

// conference functions
  rpc conference_addWaitingParticipant (ConferenceParticipantRequest) returns (ConferenceParticipantReply) {}
  rpc conference_addParticipant (ConferenceParticipantRequest) returns (ConferenceParticipantReply) {}
  rpc conference_setModeratorInConf (ConferenceModeratorRequest) returns (ConferenceModeratorReply) {}
  rpc conference_attachEventListener (ConferenceEventRequest) returns (ConferenceEventReply) {}
}

message BridgeRequest {
  bool hangup = 1;
  string client_id = 2;
}

message BridgeReply {
	string bridge_id = 1;
}

message CallRequest {
  string flow_id = 1;
  string call_id = 2;
  string caller_id = 3;
  string call_type = 4;
  string destination = 5;
  string timeout = 6;
}

message CallReply {
	string call_id = 1;
	string channel_id = 2;
}

message ChannelRequest {
  int32 channel_id = 1;
}

message ChannelReply {
}

message RecordingPlayRequest {
	int32 flow_id = 1;
	int32 channel_id = 2;
	string file_uri = 3;
}

message RecordingPlayReply {
}

message Channel {
	string channel_id = 1;
}

message ChannelFetchRequest {
	string channel_id = 1;
}

message ChannelFetchReply {
	Channel channel = 1;
}

message ConferenceRequest {
	string name = 1;
}

message ConferenceReply {
	string conf_id = 1;
	string bridge_id = 2;
}

message ChannelGetBridgeRequest {
	string channel_id = 1;
}

message ChannelGetBridgeReply {
}

message ChannelRemoveBridgeRequest {
	string channel_id = 1;
	string bridge_id = 2;
}

message ChannelRemoveBridgeReply {
}

message ChannelTTSRequest {
	string text = 1;
	string gender = 2;
	string voice = 3;
	string language = 4;
	string channel_id = 5;
}

message ChannelTTSReply {
	string playback_id = 1;
}

message ChannelInputRequest {
	string channel_id = 1;
}

message ChannelInputReply {
}

message ChannelRemoveDTMFRequest {
	string channel_id = 1;
}
message ChannelRemoveDTMFReply {
	string channel_id = 1;
}

message GenericChannelReq {
	string channel_id = 1;
}
message GenericChannelResp {
	string channel_id = 1;
}

message ChannelFlowWidgetRequest {
	string channel_id = 1;
	string widget = 2;
	map<string, string> event_vars =3;
}

message ChannelFlowWidgetReply {

}

message ChannelStartFlowWidgetRequest {
	string channel_id = 1;
	string flow_id = 2;
	map<string, string> event_vars =3;
}

message ChannelStartFlowWidgetReply {

}

message BridgeChannelRequest {
	string bridge_id = 1;
	string channel_id = 2;
}

message BridgeChannelReply {
}


message BridgeChannelsRequest {
	string bridge_id = 1;
	repeated string channel_id = 2;
}

message BridgeChannelsReply {
}

message BridgeTTSRequest {
	string text = 1;
	string gender = 2;
	string voice = 3;
	string language = 4;
	string bridge_id = 5;
}

message GenericBridgeReq {
	string bridge_id = 1;
}
message GenericBridgeResp {
	string bridge_id = 1;
}
message BridgeTTSReply {
	string playback_id = 1;
}

message BridgeAutomateLegRequest {
	string bridge_id = 1;
	string channel_id = 2;
}

message BridgeAutomateLegReply {
}

message BridgeEventRequest {
	string bridge_id = 1;
	string inline_code = 2;
}
message BridgeEventReply {
}

message RecordingDeleteRequest {
	int32 recording_id = 1;
}

message RecordingDeleteReply {
}

message RecordingTagRequest {
	int32 recording_id = 1;
	string key = 2;
	string value = 3;
}
message RecordingTagReply {
}

message RecordingTagDeleteRequest {
	int32 recording_id = 1;
	string key = 2;
}
message RecordingTagDeleteReply {
}

message Recording {
	int32 recording_id = 1;
	string file_uri = 2;
}
message SessionRecordingsRequest {
}

message SessionRecordingsReply {
	repeated Recording recordings = 1;
}

message Participant {
	string channel_id = 1;
	string role = 2;
	string moh = 3;
}
message ConferenceParticipantRequest {
	string conf_id = 1;
	repeated Participant participants = 2;
}

message ConferenceParticipantReply {
}
message ConferenceModeratorRequest {
	string conf_id = 1;
	bool value = 2;
}
message ConferenceModeratorReply {
}

message ConferenceEventRequest {
	string conf_id = 1;
	string inline_code = 2;
}

message ConferenceEventReply {
}
